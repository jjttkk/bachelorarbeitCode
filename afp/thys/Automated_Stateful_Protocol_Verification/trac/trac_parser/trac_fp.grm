(* SPDX-License-Identifier: BSD-3-Clause *)
open Trac_Term

exception NotYetSupported of string 


%%

%verbose

%eop EOF 

%left 

%name Trac

%term EOF
    | COMMA of string
    | FIXEDPOINT of string
    | WHERE of string
    | COLON of string
    | PAREN_OPEN of string
    | PAREN_CLOSE of string
    | ASTERISK of string
    | DOUBLE_ASTERISK of string
    | DOUBLE_RARROW of string
    | STRING_LITERAL of string
    | UPPER_STRING_LITERAL of string
    | LOWER_STRING_LITERAL of string
    | INTEGER_LITERAL of string
    | ONE of string
    | ZERO of string
    | ATTACK of string              
         
%nonterm START of (Msg * TypeDecl list) list
       | trac_file of (Msg * TypeDecl list) list   
       | symfact_list_exp of (Msg * TypeDecl list) list    
       | symfact_exp of Msg * TypeDecl list  
       | rule_exp of Msg   
       | arg_list_exp of Msg list
       | arg_exp  of Msg 
       | type_list_exp of TypeDecl list
       | type_exp of TypeDecl
       | string_literal of string
       | upper_literal of string
       | lower_literal of string
       | int_literal of string

%pos (int * int * int)

%noshift EOF

%%

START:               trac_file                                                  (trac_file)
trac_file:           FIXEDPOINT symfact_list_exp                                (symfact_list_exp)
                   | symfact_list_exp                                           (symfact_list_exp)
symfact_list_exp:    symfact_exp                                                ([symfact_exp])                 
                   | symfact_exp symfact_list_exp                               ([symfact_exp]@symfact_list_exp)

symfact_exp:         DOUBLE_RARROW ATTACK                                       ((Attack,[])) 
                   | rule_exp WHERE type_list_exp                               ((rule_exp,type_list_exp))
                   | DOUBLE_RARROW rule_exp WHERE type_list_exp                 ((rule_exp,type_list_exp))
                   | DOUBLE_ASTERISK DOUBLE_RARROW rule_exp WHERE type_list_exp ((rule_exp,type_list_exp))
                   | rule_exp                                                   ((rule_exp,[]))
                   | DOUBLE_RARROW rule_exp                                     ((rule_exp,[]))
                   | DOUBLE_ASTERISK DOUBLE_RARROW rule_exp                     ((rule_exp,[]))

rule_exp:            upper_literal                                              (Var (upper_literal))
                   | lower_literal                                              (Fun (lower_literal,[]))
                   | lower_literal PAREN_OPEN arg_list_exp PAREN_CLOSE          (Fun (lower_literal,arg_list_exp)) 
arg_list_exp:        arg_exp                                                    ([arg_exp])
                   | arg_exp COMMA arg_list_exp                                 ([arg_exp]@arg_list_exp)
arg_exp:             rule_exp                                                   (rule_exp)
                   | ASTERISK int_literal                                       (Var (int_literal))
                   | int_literal                                                (Const (int_literal))

type_list_exp:       type_exp                                                   ([type_exp])
                   | type_exp type_list_exp                                     ([type_exp]@type_list_exp)
type_exp:            ASTERISK int_literal COLON string_literal                  ((int_literal,string_literal))
                   | upper_literal COLON string_literal                         ((upper_literal,string_literal))

upper_literal:       UPPER_STRING_LITERAL                                       (UPPER_STRING_LITERAL)
lower_literal:       LOWER_STRING_LITERAL                                       (LOWER_STRING_LITERAL)
string_literal:      upper_literal                                              (upper_literal)
                   | lower_literal                                              (lower_literal)
int_literal:         INTEGER_LITERAL                                            (INTEGER_LITERAL)
                   | ZERO                                                       ("0")
                   | ONE                                                        ("1")

